const {PNGFS} = require('./pngfs.js');
const {dom} = require('./dom.js');

const palette = [
    /*
    [255, 0, 255],
    [0, 0, 0],
    [255, 255, 255],
    [90, 165, 90],
    [90, 129, 164],
    [164, 161, 90],
    [164, 105, 90],
    [164, 97, 148],
    [90, 165, 139],
    [115, 97, 164],
    [115, 141, 115],
    [65, 190, 65],
    [189, 186, 65],
    [115, 190, 65],
    [65, 76, 189],
    [189, 85, 65],
    [189, 68, 164],
    [189, 141, 65],
    [65, 186, 189],
    [189, 68, 123],
    [156, 68, 189],
    [65, 190, 115],
    [106, 68, 189],
    [41, 214, 41],
    [41, 133, 213],
    [213, 210, 41],
    [41, 52, 213],
    [213, 64, 41],
    [213, 44, 197],
    [172, 214, 41],
    [213, 44, 90],
    [41, 214, 156],
    [41, 210, 213],
    [82, 44, 213],
    [213, 113, 41],
    [90, 214, 41],
    [41, 214, 90],
    [213, 161, 41],
    [131, 44, 213],
    [222, 36, 156],
    [32, 97, 222],
    [123, 230, 24],
    [230, 28, 57],
    [189, 28, 230],
    [230, 28, 230],
    [24, 170, 230],
    [24, 230, 123],
    [8, 250, 8],
    [8, 133, 246],
    [246, 238, 8],
    [8, 250, 49],
    [8, 20, 246],
    [246, 40, 8],
    [189, 250, 8],
    [246, 194, 8],
    [57, 250, 8],
    [246, 149, 8],
    [8, 250, 164],
    [8, 242, 246],
    [65, 12, 246],
    [246, 105, 8],
    [246, 12, 139],
    [8, 250, 205],
    [8, 64, 246],
    [156, 12, 246],
    [246, 12, 180],
    [246, 12, 90],
    [115, 12, 246],
    [8, 202, 246],
    [57, 101, 57],
    [57, 80, 98],
    [98, 101, 57],
    [98, 60, 57],
    [98, 56, 98],
    [41, 40, 115],
    [41, 117, 90],
    [24, 133, 24],
    [24, 80, 131],
    [131, 129, 24],
    [65, 133, 24],
    [131, 36, 24],
    [131, 24, 115],
    [131, 89, 24],
    [24, 133, 131],
    [131, 24, 74],
    [90, 24, 131],
    [16, 20, 139],
    [16, 141, 74],
    [98, 145, 8],
    [0, 157, 0],
    [156, 149, 0],
    [156, 20, 0],
    [156, 0, 139],
    [156, 0, 41],
    [0, 153, 156],
    [156, 0, 98],
    [156, 60, 0],
    [41, 157, 0],
    [106, 0, 156],
    [0, 157, 41],
    [0, 64, 156],
    [0, 109, 156],
    [156, 105, 0],
    [49, 0, 156],
    [180, 214, 180],
    [180, 182, 213],
    [213, 186, 180],
    [222, 222, 172],
    [222, 170, 222],
    [172, 222, 222],
    [156, 234, 156],
    [230, 161, 156],
    [156, 157, 238],
    [197, 242, 148],
    [148, 242, 197],
    [139, 198, 246],
    [246, 246, 139],
    [246, 145, 238],
    [246, 206, 139],
    [139, 250, 246],
    [246, 145, 197],
    [205, 145, 246],
    [131, 186, 131],
    [131, 161, 189],
    [189, 186, 131],
    [189, 141, 131],
    [189, 137, 172],
    [115, 121, 205],
    [115, 206, 172],
    [189, 117, 205],
    [156, 165, 156],
    [98, 226, 98],
    [98, 161, 222],
    [222, 218, 98],
    [148, 226, 98],
    [222, 113, 98],
    [222, 174, 98],
    [98, 222, 222],
    [222, 101, 180],
    [222, 101, 222],
    [98, 226, 139],
    [222, 101, 139],
    [148, 101, 222],
    [90, 97, 230],
    [82, 238, 180],
    [189, 85, 238],
    [74, 250, 74],
    [246, 242, 74],
    [246, 93, 74],
    [246, 72, 213],
    [205, 250, 74],
    [246, 72, 115],
    [74, 246, 246],
    [115, 72, 246],
    [246, 145, 74],
    [123, 250, 74],
    [246, 72, 164],
    [74, 129, 246],
    [74, 198, 246],
    [246, 194, 74],
    [156, 129, 189],
    [32, 60, 32],
    [57, 32, 57],
    [8, 80, 8],
    [8, 48, 82],
    [82, 76, 8],
    [82, 20, 8],
    [8, 80, 57],
    [24, 12, 82],
    [82, 8, 74],
    [49, 93, 0],
    [74, 133, 74],
    [74, 101, 131],
    [131, 129, 74],
    [131, 80, 74],
    [131, 72, 123],
    [148, 153, 49],
    [98, 153, 49],
    [57, 52, 148],
    [49, 153, 106],
    [98, 109, 98],
    [172, 28, 65],
    [74, 174, 24],
    [148, 28, 172],
    [24, 174, 131],
    [123, 174, 24],
    [74, 28, 172],
    [41, 105, 164],
    [164, 40, 139],
    [164, 113, 41],
    [41, 161, 164],
    [41, 161, 49],
    [164, 68, 41],
    [180, 178, 16],
    [16, 28, 180],
    [16, 182, 82],
    [16, 190, 16],
    [189, 36, 16],
    [189, 16, 156],
    [16, 186, 189],
    [189, 85, 16],
    [189, 133, 16],
    [98, 202, 0],
    [205, 0, 49],
    [205, 0, 123],
    [8, 0, 205],
    [49, 0, 205],
    [57, 202, 0],
    [164, 0, 205],
    [0, 64, 205],
    [0, 202, 148],
    [123, 0, 205],
    [0, 141, 205],
    [205, 4, 0],
    [148, 202, 0],
    [156, 48, 98],
    [115, 48, 156],
    [205, 0, 189],
    [0, 206, 57],
    [213, 234, 213],
    [238, 214, 238],
    [246, 250, 197],
    [197, 202, 246],
    [246, 206, 197],
    [197, 250, 246],
    [8, 105, 106],
    [106, 12, 41],
    [0, 117, 49],
    [41, 0, 115],
    [115, 0, 0],
    [131, 250, 131],
    [246, 137, 131],
    [180, 250, 115],
    [115, 133, 246],
    [131, 109, 131],
    [0, 242, 90],
    [246, 0, 16],
    [74, 113, 197],
    [0, 157, 106],
    [0, 101, 197],
    [49, 250, 213],
    [156, 60, 238],
    [65, 52, 246],
    [148, 198, 197],
    [172, 121, 246],
    [98, 250, 0],
    [106, 105, 0],
    [156, 250, 32],
    [16, 20, 32],
    [49, 48, 0],
    [49, 0, 8],
    [197, 210, 0],
    [0, 40, 0],
    [57, 250, 123],
    [222, 64, 246],
    [222, 72, 0]
    */

    [255, 0, 255],
    [0, 0, 0],
    [12, 12, 12],
    [25, 25, 25],
    [18, 0, 51],
    [38, 38, 38],
    [53, 76, 0],
    [0, 53, 76],
    [76, 0, 53],
    [53, 53, 53],
    [39, 26, 80],
    [80, 39, 26],
    [26, 80, 39],
    [0, 107, 80],
    [26, 0, 107],
    [107, 0, 26],
    [80, 107, 0],
    [66, 66, 66],
    [81, 88, 44],
    [44, 81, 88],
    [88, 44, 81],
    [110, 22, 51],
    [110, 98, 22],
    [22, 110, 28],
    [22, 86, 110],
    [63, 22, 110],
    [24, 0, 132],
    [132, 0, 41],
    [108, 132, 0],
    [0, 132, 90],
    [79, 79, 79],
    [62, 59, 98],
    [98, 62, 59],
    [59, 98, 62],
    [39, 118, 86],
    [39, 55, 118],
    [118, 39, 118],
    [118, 55, 39],
    [86, 118, 39],
    [124, 138, 19],
    [21, 138, 19],
    [19, 138, 118],
    [19, 55, 138],
    [84, 19, 138],
    [138, 19, 90],
    [138, 51, 19],
    [158, 0, 57],
    [0, 158, 100],
    [91, 91, 91],
    [113, 114, 68],
    [68, 113, 114],
    [114, 68, 113],
    [137, 45, 88],
    [137, 113, 45],
    [52, 137, 45],
    [45, 125, 137],
    [76, 45, 137],
    [29, 22, 160],
    [146, 22, 160],
    [160, 22, 55],
    [160, 107, 22],
    [94, 160, 22],
    [22, 160, 68],
    [22, 133, 160],
    [0, 183, 104],
    [0, 107, 183],
    [52, 0, 183],
    [183, 0, 159],
    [183, 0, 0],
    [183, 156, 0],
    [52, 183, 0],
    [107, 107, 107],
    [85, 87, 128],
    [128, 85, 87],
    [87, 128, 85],
    [64, 149, 104],
    [64, 92, 149],
    [138, 64, 149],
    [149, 69, 64],
    [127, 149, 64],
    [171, 169, 42],
    [64, 171, 42],
    [42, 171, 132],
    [42, 100, 171],
    [96, 42, 171],
    [171, 42, 137],
    [171, 57, 42],
    [192, 21, 107],
    [192, 49, 21],
    [192, 164, 21],
    [107, 192, 21],
    [21, 192, 49],
    [21, 192, 164],
    [21, 107, 192],
    [49, 21, 192],
    [164, 21, 192],
    [3, 0, 214],
    [210, 214, 0],
    [119, 119, 119],
    [143, 138, 95],
    [95, 143, 138],
    [138, 95, 143],
    [167, 71, 129],
    [167, 129, 71],
    [91, 167, 71],
    [71, 167, 167],
    [91, 71, 167],
    [47, 59, 191],
    [158, 47, 191],
    [191, 47, 103],
    [191, 117, 47],
    [143, 191, 47],
    [47, 191, 76],
    [47, 184, 191],
    [23, 215, 107],
    [23, 196, 215],
    [23, 68, 215],
    [107, 23, 215],
    [215, 23, 196],
    [215, 23, 68],
    [215, 107, 23],
    [196, 215, 23],
    [68, 215, 23],
    [239, 227, 0],
    [0, 239, 35],
    [0, 155, 239],
    [131, 0, 239],
    [239, 0, 59],
    [132, 132, 132],
    [108, 117, 157],
    [157, 108, 117],
    [117, 157, 108],
    [83, 181, 114],
    [83, 130, 181],
    [153, 83, 181],
    [181, 83, 91],
    [170, 181, 83],
    [206, 181, 59],
    [103, 206, 59],
    [59, 206, 139],
    [59, 144, 206],
    [98, 59, 206],
    [206, 59, 186],
    [206, 59, 61],
    [230, 34, 161],
    [230, 37, 34],
    [230, 168, 34],
    [161, 230, 34],
    [34, 230, 37],
    [34, 230, 168],
    [34, 161, 230],
    [37, 34, 230],
    [168, 34, 230],
    [10, 42, 255],
    [255, 10, 238],
    [255, 75, 10],
    [140, 255, 10],
    [10, 255, 173],
    [145, 145, 145],
    [167, 155, 123],
    [123, 167, 155],
    [155, 123, 167],
    [189, 101, 167],
    [189, 140, 101],
    [132, 189, 101],
    [101, 189, 176],
    [105, 101, 189],
    [79, 110, 211],
    [162, 79, 211],
    [211, 79, 147],
    [211, 123, 79],
    [184, 211, 79],
    [79, 211, 86],
    [79, 211, 200],
    [57, 233, 107],
    [57, 233, 224],
    [57, 124, 233],
    [107, 57, 233],
    [224, 57, 233],
    [233, 57, 124],
    [233, 107, 57],
    [233, 224, 57],
    [124, 233, 57],
    [255, 211, 35],
    [35, 79, 255],
    [160, 160, 160],
    [137, 152, 184],
    [184, 137, 152],
    [152, 184, 137],
    [113, 207, 130],
    [113, 171, 207],
    [168, 113, 207],
    [207, 113, 133],
    [207, 206, 113],
    [231, 188, 89],
    [153, 231, 89],
    [89, 231, 148],
    [89, 193, 231],
    [108, 89, 231],
    [229, 89, 231],
    [231, 89, 111],
    [255, 66, 214],
    [255, 78, 66],
    [255, 242, 66],
    [107, 255, 66],
    [66, 255, 188],
    [66, 160, 255],
    [135, 66, 255],
    [173, 173, 173],
    [193, 177, 153],
    [153, 193, 177],
    [177, 153, 193],
    [214, 132, 204],
    [214, 158, 132],
    [172, 214, 132],
    [132, 214, 191],
    [132, 139, 214],
    [112, 157, 234],
    [171, 112, 234],
    [234, 112, 191],
    [234, 136, 112],
    [228, 234, 112],
    [122, 234, 112],
    [112, 234, 206],
    [91, 255, 116],
    [255, 91, 230],
    [186, 186, 186],
    [163, 184, 208],
    [208, 163, 184],
    [184, 208, 163],
    [140, 231, 145],
    [140, 208, 231],
    [181, 140, 231],
    [231, 140, 172],
    [231, 217, 140],
    [255, 195, 117],
    [117, 255, 126],
    [117, 176, 255],
    [255, 117, 245],
    [198, 198, 198],
    [226, 196, 170],
    [170, 226, 196],
    [196, 170, 226],
    [251, 142, 255],
    [255, 195, 142],
    [146, 255, 142],
    [142, 202, 255],
    [214, 214, 214],
    [173, 223, 255],
    [255, 173, 223],
    [223, 255, 173],
    [226, 226, 226],
    [255, 216, 198],
    [239, 239, 239],
    [255, 255, 255]

];

function convertToU8(img, settings){
    settings = settings || {bpp:8, header:1, isTransparent:1};
    let transparentIndex = settings.transparent|0;
    // let palette = settings.palette;
    let out = [];
    let bpp = (settings.bpp|0) || (Math.log(palette.length) / Math.log(2))|0;
    if (settings.header|0) {
        if (img.width < 256 && img.height < 256) {
            out.push([img.width, img.height, bpp, 0]);
        } else {
            out.push([
                0,
                (img.width >> 8) & 0xFF, img.width & 0xFF,
                (img.height >> 8) & 0xFF, img.height & 0xFF,
                bpp,
                0
            ]);
        }
    }
    let i=0, len, bytes, data = img.data;
    let ppb = 8 / bpp;
    let run = [],
        min = settings.paloffset|0,
        max = Math.min(palette.length, min+(1<<bpp));
    let lowest = 255;
    let highest = 0;

    let transparent = settings.isTransparent;

    if (transparent === undefined){
        for( i=3; !transparent && i<data.length; i+=4 ){
            transparent = data[i] < 128;
        }
    } else transparent = transparent|0;
    settings.isTransparent = transparent;

    i=0;
    let PC = undefined, PCC = 0;

    for( let y=0; y<img.height; ++y ){

        run = [];

        for( let x=0; x<img.width; ++x ){
            let closest = 0;
            let closestDist = Number.POSITIVE_INFINITY;
            let R = data[i++]|0;
            let G = data[i++]|0;
            let B = data[i++]|0;
            let A = data[i++]|0;
            if(bpp == 16) {
                let C = (R>>3<<11) | (G>>2<<5) | (B>>3);
                run.push(C&0xFF, C>>8);
            } else if(bpp == 1) {
                if (transparent) {
                    closest = A > 128;
                } else {
                    closest = (R + G + B) / 3 > 128;
                }

                run[x>>3|0] = (run[x>>3]||0) + (closest<<(7 - (x&7)));
            } else {
                let C = (R<<16) + (G<<8) + B;
                if( A > 128 || !transparent ) {
                    if(C === PC){
                        closest = PCC;
                    } else {

                        for( let c=min; c<max; ++c ){
                            if( transparent && c == transparentIndex )
                                continue;
                            const ca = palette[c];
                            const PR = ca[0]|0;
                            const PG = ca[1]|0;
                            const PB = ca[2]|0;
		            const dist = (R-PR)*(R-PR)
                                  + (G-PG)*(G-PG)
                                  + (B-PB)*(B-PB)
                            ;

                            if( dist < closestDist ){
                                closest = c;
                                closestDist = dist;
                            }
                        }

                        PC = C;
                        PCC = closest;

                    }

                }else{
                    closest = transparentIndex;
                }

                if (closest < lowest)
                    lowest = closest;
                if (closest > highest)
                    highest = closest;

                let shift = (ppb - 1 - x%ppb) * bpp;
                run[(x/ppb)|0] = (run[(x/ppb)|0]||0) + ((closest-min)<<shift);
            }
        }

        out.push(run);
    }

    let range = (highest - lowest) + 1;


    return out;
}

async function prebuild(fs) {
    let promises = [];
    let outfs;
    fs.recurse(entity => {
        if (!entity.isFile())
            return entity.name[0] != '.';
        let extension = entity.extension;
        if (extension == 'jpg' || extension == 'png') {
            init().push(convertImage.call(this, entity.name, entity.node.data));
        }
        return false;
    });

    if (!promises.length)
        return fs;

    await Promise.all(promises);

    return outfs;

    async function convertImage(name, data) {
        return new Promise((resolve, fail) => {
            const img = new Image();
            img.onload = _=>{
                const canvas = dom('canvas', {width:img.width, height:img.height});
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                const data = ctx.getImageData(0, 0, img.width, img.height);
                const arrays = convertToU8(data, {bpp:8, header:1, isTransparent:1});
                let out = '';
                for (let array of arrays) {
                    for (let v of array) {
                            out += v.toString(16).padStart(2, '0');
                    }
                }
                const outName = `/.R/${name.split('.')[0]}.raw`;
                outfs.writeFile(outName, out);
                resolve();
            }
            img.onerror = _=>{
                fail('Could not load image ' + name);
            };
            img.src = data;
        });
    }

    function init() {
        if (!outfs) {
            outfs = new PNGFS(fs.toJSON());
            outfs.mkdir('/.R');
        }
        return promises;
    }
}

module.exports.PreBuild = prebuild;
module.exports.palette = palette;
module.exports.convertToU8 = convertToU8;
